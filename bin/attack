#!/usr/bin/env python3
import argparse
from pyattck import Attck
import sys

VARIANCE = 1

parser = argparse.ArgumentParser(description="Tools for working with ATTCK")
parser.add_argument('-t', '--ttps', metavar="ttps",
                    type=str, help="Comma delimeted list of ATT&CK techniques",
                    default=None)
parser.add_argument('-o', '--org', action="store_true", help="Format output as org table",
                    default=False)
parser.add_argument('-c', '--categories', metavar="categories",
                    type=str, help="Comma delimited list to search",
                    default="actors,malwares,tools")

args = parser.parse_args()
if args.ttps:
    ttps = args.ttps.split(",")
categories = args.categories.split(",")
org = args.org

a = Attck(nested_subtechniques=False)

if not args.ttps:
    for x in a.enterprise.techniques:
        print(x.id + "|" + x.name)
    sys.exit(0)


def tuple_to_org(tup, name=None):
    if len(tup) == 0:
        return ""
    if name:
        string = "#+NAME: {}\n".format(name)
    else:
        string = ""
    string += "|-\n"
    string += "|name|id|match|total|\n"
    string += "|-\n"
    for t in tup:
        converted = ["{:1.2f}".format(x) if (type(x) is float) else str(x) for x in t]
        string += "|"
        string += "|".join(converted)
        string += "|\n"
    string += "\n"
    return string


def ttps_to_thing(ttps, category):
    res = []
    for thing in getattr(a, category):
        overlap = 0
        for technique in thing.techniques:
            if technique.id in ttps:
                overlap += 1
        if overlap >= len(ttps) - 1:
            # name, id, percent overlap, percent of total
            res.append((thing.name,
                        thing.id,
                        overlap / len(ttps),
                        overlap / len(thing.techniques)))
    return res


for category in categories:
    res = ttps_to_thing(ttps, category)
    if org:
        print(tuple_to_org(res, category))
    else:
        if len(res) != 0:
            print(res)
